name: PyTorch Linear Regression CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r models/linear-regression/requirements.txt
        pip install pytest pytest-html
        
    - name: Run tests
      run: |
        cd models/linear-regression
        python -c "
        import torch
        import numpy as np
        import matplotlib
        matplotlib.use('Agg')  # Use non-interactive backend
        import matplotlib.pyplot as plt
        from simple_linear_regression import SimpleLinearModel, generate_data, train_model, visualize_results
        
        print('✅ All imports successful')
        
        # Test data generation
        X, y, true_slope, true_intercept = generate_data()
        print(f'✅ Data generation successful: {len(X)} samples')
        
        # Test model creation
        model = SimpleLinearModel()
        print('✅ Model creation successful')
        
        # Test training
        model, X, y, losses, true_slope, true_intercept = train_model()
        print('✅ Training successful')
        
        # Test final accuracy
        learned_weight = model.linear.weight.item()
        learned_bias = model.linear.bias.item()
        weight_error = abs(learned_weight - true_slope)
        bias_error = abs(learned_bias - true_intercept)
        
        print(f'Weight error: {weight_error:.4f}')
        print(f'Bias error: {bias_error:.4f}')
        
        # Check if model learned correctly (within 5% error)
        if weight_error < 0.1 and bias_error < 0.1:
            print('✅ Model accuracy test passed')
        else:
            print('❌ Model accuracy test failed')
            exit(1)
        "
        
    - name: Generate HTML Report
      run: |
        cd models/linear-regression
        python -c "
        import torch
        import numpy as np
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
        from simple_linear_regression import train_model, visualize_results
        import json
        from datetime import datetime
        
        # Run the model
        model, X, y, losses, true_slope, true_intercept = train_model()
        
        # Get learned parameters
        learned_weight = model.linear.weight.item()
        learned_bias = model.linear.bias.item()
        
        # Create HTML report
        html_content = f'''
        <!DOCTYPE html>
        <html lang=\"en\">
        <head>
            <meta charset=\"UTF-8\">
            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
            <title>PyTorch Linear Regression Results</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
                .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .header {{ text-align: center; color: #333; border-bottom: 2px solid #007acc; padding-bottom: 20px; margin-bottom: 30px; }}
                .status {{ display: inline-block; padding: 5px 15px; border-radius: 20px; color: white; font-weight: bold; }}
                .success {{ background-color: #28a745; }}
                .info {{ background-color: #17a2b8; }}
                .results {{ display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin: 30px 0; }}
                .result-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #007acc; }}
                .metric {{ display: flex; justify-content: space-between; margin: 10px 0; }}
                .metric-value {{ font-weight: bold; color: #007acc; }}
                .chart {{ text-align: center; margin: 20px 0; }}
                .footer {{ text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; }}
                .badge {{ display: inline-block; margin: 5px; padding: 5px 10px; background: #007acc; color: white; border-radius: 3px; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class=\"container\">
                <div class=\"header\">
                    <h1>🚀 PyTorch Linear Regression Results</h1>
                    <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC</p>
                    <span class=\"status success\">✅ Build Successful</span>
                </div>
                
                <div class=\"results\">
                    <div class=\"result-card\">
                        <h3>📊 Model Performance</h3>
                        <div class=\"metric\">
                            <span>True Slope:</span>
                            <span class=\"metric-value\">{true_slope:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Learned Slope:</span>
                            <span class=\"metric-value\">{learned_weight:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Slope Error:</span>
                            <span class=\"metric-value\">{abs(learned_weight - true_slope):.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>True Intercept:</span>
                            <span class=\"metric-value\">{true_intercept:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Learned Intercept:</span>
                            <span class=\"metric-value\">{learned_bias:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Intercept Error:</span>
                            <span class=\"metric-value\">{abs(learned_bias - true_intercept):.4f}</span>
                        </div>
                    </div>
                    
                    <div class=\"result-card\">
                        <h3>📈 Training Statistics</h3>
                        <div class=\"metric\">
                            <span>Final Loss:</span>
                            <span class=\"metric-value\">{losses[-1]:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Initial Loss:</span>
                            <span class=\"metric-value\">{losses[0]:.4f}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Loss Reduction:</span>
                            <span class=\"metric-value\">{((losses[0] - losses[-1]) / losses[0] * 100):.1f}%</span>
                        </div>
                        <div class=\"metric\">
                            <span>Training Epochs:</span>
                            <span class=\"metric-value\">{len(losses)}</span>
                        </div>
                        <div class=\"metric\">
                            <span>Data Points:</span>
                            <span class=\"metric-value\">{len(X)}</span>
                        </div>
                        <div class=\"metric\">
                            <span>PyTorch Version:</span>
                            <span class=\"metric-value\">{torch.__version__}</span>
                        </div>
                    </div>
                </div>
                
                <div class=\"chart\">
                    <h3>📊 Loss Curve</h3>
                    <img src=\"loss_curve.png\" alt=\"Loss Curve\" style=\"max-width: 100%; height: auto;\">
                </div>
                
                <div class=\"footer\">
                    <p>This report is automatically generated by GitHub Actions CI/CD pipeline</p>
                    <a href=\"https://github.com/mimitheone/PyTorch\" class=\"badge\">View Source</a>
                    <a href=\"https://github.com/mimitheone/PyTorch/actions\" class=\"badge\">View Actions</a>
                </div>
            </div>
        </body>
        </html>
        '''
        
        # Save HTML report
        with open('report.html', 'w') as f:
            f.write(html_content)
        
        # Generate loss curve
        plt.figure(figsize=(10, 6))
        plt.plot(losses)
        plt.title('Training Loss Over Time')
        plt.xlabel('Epoch')
        plt.ylabel('Loss (MSE)')
        plt.grid(True, alpha=0.3)
        plt.savefig('loss_curve.png', dpi=150, bbox_inches='tight')
        plt.close()
        
        print('✅ HTML report and loss curve generated')
        "
        
    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: pytorch-report
        path: |
          report.html
          loss_curve.png
          
    - name: Setup Pages
      if: github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
      
    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: |
          index.html
          models/
          LICENSE
          README.md
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/master'
      id: deployment
      uses: actions/deploy-pages@v4
